#include <stdio.h>
#include <stdarg.h>
#include <string.h>

#define NOK -1
#define OK 0

typedef char* string;

typedef enum {
	no_value,
	Char_Argument,
	String_Argument,
	Int_Argument,
} argument_types_e;

int get_token (char* string, int *token) {
	int i=0, pos[20], t=0;
	bzero(pos, 20*sizeof(int));
	
	for (i=0;i<strlen(string);i++) {
		if (string[i]=='%' && (string[i+1]=='s' || string[i+1]=='d' || string[i+1]=='c')) {
			/* Increment counter for memory allocation and save position */
			pos[t++]=i+1;
		} else if (string[i]=='%' && (string[i+1]!='s' || string[i+1]!='d' || string[i+1]!='c')) {
			printf("Unrecognized type\n");
			goto error;
		} else continue;
	}

	token = (int*)malloc(t*sizeof(int));
	if (token == 0) {
		printf("Error allocation memory\n");
		goto error;
	}
	for (i=0;i<t;i++) {
		*(token+i) = pos[i];
	}
	return OK;
error:
	return NOK;
}

int get_arg(va_list ap, int *token, int i, char* c, string s, int *d) {

	if (!token) {
		s = va_arg(ap, char*);
		if (!get_token(s, token)) goto error;
	} else {
		 switch (token[i]) {
	//		case First_Argument:
	//			s = va_arg(ap, char*);
	//			break;
			case Char_Argument:
				*c = va_arg(ap, char);
				break;
			case String_Argument:
				s = va_arg(ap, char*);
				break;
			case Int_Argument:
				*d = va_arg(ap, int*);
				break;
			default:
				printf("Error invalid type\n");
				goto error;
				break;
		}
	}
	return OK;
error:
	return NOK;
}

void error_test(char *error_txt ...) {

	va_list ap;
	va_start(ap, error_txt);
	char 	*c=0;
	string	 s=0;
	int 	*d=0, i=0;
	int 	*token = 0, res = 0;
	for (;;i++) {
		res = get_arg(ap, token, i, c, s, d);
		if (res != OK) break;
	}

	va_end(ap);
	printf("%s %c %s %d \n", error_txt, c, s, d);
	return;
}


int main(int argc, char** argv) {
	printf("Testing\n");
	char string = {"This is the test string: %c %s %d \0"};
	error_test(string, a, "asd", 7);
}
